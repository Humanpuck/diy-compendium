{"version":3,"sources":["webpack:///./node_modules/date-fns/esm/parseISO/index.js","webpack:///./src/components/content/wordpress/post.js"],"names":["patterns","dateTimeDelimiter","timeZoneDelimiter","timezone","dateRegex","timeRegex","timezoneRegex","splitDateString","dateString","timeString","dateStrings","array","split","test","date","substr","length","token","exec","time","replace","parseYear","additionalDigits","regex","RegExp","captures","match","year","parseInt","century","restDateString","slice","parseDate","isWeekDate","dayOfYear","parseDateUnit","month","day","week","dayOfWeek","_year","validateWeekDate","isoWeekYear","Date","setUTCFullYear","fourthOfJanuaryDay","getUTCDay","diff","setUTCDate","getUTCDate","dayOfISOWeekYear","NaN","daysInMonths","isLeapYearIndex","validateDate","validateDayOfYearDate","Math","max","value","parseTime","hours","parseTimeUnit","minutes","seconds","validateTime","parseFloat","parseTimezone","timezoneString","sign","_hours","validateTimezone","WordPressPostContent","data","wordpressPost","content","title","rawDate","name","author","parsed","argument","dirtyOptions","requiredArgs","arguments","options","toInteger","RangeError","Object","prototype","toString","call","parseYearResult","isNaN","offset","timestamp","getTime","fullTime","fullTimeDate","getTimezoneOffsetInMilliseconds","fullTimeDateDiffDay","setDate","getDate","offsetDiff","parseISO","format","Container","className","Row","Col","md","dangerouslySetInnerHTML","__html","displayName","pageQuery"],"mappings":"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","file":"component---src-components-content-wordpress-post-js-fae086e97efb09976e53.js","sourcesContent":["import \"core-js/modules/es6.regexp.match\";\nimport \"core-js/modules/es6.regexp.constructor\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.date.to-string\";\nimport \"core-js/modules/es6.object.to-string\";\nimport toInteger from '../_lib/toInteger/index.js';\nimport getTimezoneOffsetInMilliseconds from '../_lib/getTimezoneOffsetInMilliseconds/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\nvar MILLISECONDS_IN_HOUR = 3600000;\nvar MILLISECONDS_IN_MINUTE = 60000;\nvar DEFAULT_ADDITIONAL_DIGITS = 2;\nvar patterns = {\n  dateTimeDelimiter: /[T ]/,\n  timeZoneDelimiter: /[Z ]/i,\n  timezone: /([Z+-].*)$/\n};\nvar dateRegex = /^-?(?:(\\d{3})|(\\d{2})(?:-?(\\d{2}))?|W(\\d{2})(?:-?(\\d{1}))?|)$/;\nvar timeRegex = /^(\\d{2}(?:[.,]\\d*)?)(?::?(\\d{2}(?:[.,]\\d*)?))?(?::?(\\d{2}(?:[.,]\\d*)?))?$/;\nvar timezoneRegex = /^([+-])(\\d{2})(?::?(\\d{2}))?$/;\n/**\n * @name parseISO\n * @category Common Helpers\n * @summary Parse ISO string\n *\n * @description\n * Parse the given string in ISO 8601 format and return an instance of Date.\n *\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n *\n * If the argument isn't a string, the function cannot parse the string or\n * the values are invalid, it returns Invalid Date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The previous `parse` implementation was renamed to `parseISO`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   parse('2016-01-01')\n *\n *   // v2.0.0 onward\n *   parseISO('2016-01-01')\n *   ```\n *\n * - `parseISO` now validates separate date and time values in ISO-8601 strings\n *   and returns `Invalid Date` if the date is invalid.\n *\n *   ```javascript\n *   parseISO('2018-13-32')\n *   //=> Invalid Date\n *   ```\n *\n * - `parseISO` now doesn't fall back to `new Date` constructor\n *   if it fails to parse a string argument. Instead, it returns `Invalid Date`.\n *\n * @param {String} argument - the value to convert\n * @param {Object} [options] - an object with options.\n * @param {0|1|2} [options.additionalDigits=2] - the additional number of digits in the extended year format\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * var result = parseISO('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert string '+02014101' to date,\n * // if the additional number of digits in the extended year format is 1:\n * var result = parseISO('+02014101', { additionalDigits: 1 })\n * //=> Fri Apr 11 2014 00:00:00\n */\n\nexport default function parseISO(argument, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var additionalDigits = options.additionalDigits == null ? DEFAULT_ADDITIONAL_DIGITS : toInteger(options.additionalDigits);\n\n  if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {\n    throw new RangeError('additionalDigits must be 0, 1 or 2');\n  }\n\n  if (!(typeof argument === 'string' || Object.prototype.toString.call(argument) === '[object String]')) {\n    return new Date(NaN);\n  }\n\n  var dateStrings = splitDateString(argument);\n  var date;\n\n  if (dateStrings.date) {\n    var parseYearResult = parseYear(dateStrings.date, additionalDigits);\n    date = parseDate(parseYearResult.restDateString, parseYearResult.year);\n  }\n\n  if (isNaN(date) || !date) {\n    return new Date(NaN);\n  }\n\n  var timestamp = date.getTime();\n  var time = 0;\n  var offset;\n\n  if (dateStrings.time) {\n    time = parseTime(dateStrings.time);\n\n    if (isNaN(time) || time === null) {\n      return new Date(NaN);\n    }\n  }\n\n  if (dateStrings.timezone) {\n    offset = parseTimezone(dateStrings.timezone);\n\n    if (isNaN(offset)) {\n      return new Date(NaN);\n    }\n  } else {\n    var fullTime = timestamp + time;\n    var fullTimeDate = new Date(fullTime);\n    offset = getTimezoneOffsetInMilliseconds(fullTimeDate); // Adjust time when it's coming from DST\n\n    var fullTimeDateDiffDay = new Date(fullTime);\n\n    if (offset > 0) {\n      fullTimeDateDiffDay.setDate(fullTimeDate.getDate() + 1);\n    } else {\n      fullTimeDateDiffDay.setDate(fullTimeDate.getDate() - 1);\n    }\n\n    var offsetDiff = getTimezoneOffsetInMilliseconds(fullTimeDateDiffDay) - offset;\n\n    if (offsetDiff > 0) {\n      offset += offsetDiff;\n    }\n  }\n\n  return new Date(timestamp + time + offset);\n}\n\nfunction splitDateString(dateString) {\n  var dateStrings = {};\n  var array = dateString.split(patterns.dateTimeDelimiter);\n  var timeString;\n\n  if (/:/.test(array[0])) {\n    dateStrings.date = null;\n    timeString = array[0];\n  } else {\n    dateStrings.date = array[0];\n    timeString = array[1];\n\n    if (patterns.timeZoneDelimiter.test(dateStrings.date)) {\n      dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];\n      timeString = dateString.substr(dateStrings.date.length, dateString.length);\n    }\n  }\n\n  if (timeString) {\n    var token = patterns.timezone.exec(timeString);\n\n    if (token) {\n      dateStrings.time = timeString.replace(token[1], '');\n      dateStrings.timezone = token[1];\n    } else {\n      dateStrings.time = timeString;\n    }\n  }\n\n  return dateStrings;\n}\n\nfunction parseYear(dateString, additionalDigits) {\n  var regex = new RegExp('^(?:(\\\\d{4}|[+-]\\\\d{' + (4 + additionalDigits) + '})|(\\\\d{2}|[+-]\\\\d{' + (2 + additionalDigits) + '})$)');\n  var captures = dateString.match(regex); // Invalid ISO-formatted year\n\n  if (!captures) return {\n    year: null\n  };\n  var year = captures[1] && parseInt(captures[1]);\n  var century = captures[2] && parseInt(captures[2]);\n  return {\n    year: century == null ? year : century * 100,\n    restDateString: dateString.slice((captures[1] || captures[2]).length)\n  };\n}\n\nfunction parseDate(dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) return null;\n  var captures = dateString.match(dateRegex); // Invalid ISO-formatted string\n\n  if (!captures) return null;\n  var isWeekDate = !!captures[4];\n  var dayOfYear = parseDateUnit(captures[1]);\n  var month = parseDateUnit(captures[2]) - 1;\n  var day = parseDateUnit(captures[3]);\n  var week = parseDateUnit(captures[4]);\n  var dayOfWeek = parseDateUnit(captures[5]) - 1;\n\n  if (isWeekDate) {\n    if (!validateWeekDate(year, week, dayOfWeek)) {\n      return new Date(NaN);\n    }\n\n    return dayOfISOWeekYear(year, week, dayOfWeek);\n  } else {\n    var date = new Date(0);\n\n    if (!validateDate(year, month, day) || !validateDayOfYearDate(year, dayOfYear)) {\n      return new Date(NaN);\n    }\n\n    date.setUTCFullYear(year, month, Math.max(dayOfYear, day));\n    return date;\n  }\n}\n\nfunction parseDateUnit(value) {\n  return value ? parseInt(value) : 1;\n}\n\nfunction parseTime(timeString) {\n  var captures = timeString.match(timeRegex);\n  if (!captures) return null; // Invalid ISO-formatted time\n\n  var hours = parseTimeUnit(captures[1]);\n  var minutes = parseTimeUnit(captures[2]);\n  var seconds = parseTimeUnit(captures[3]);\n\n  if (!validateTime(hours, minutes, seconds)) {\n    return NaN;\n  }\n\n  return hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE + seconds * 1000;\n}\n\nfunction parseTimeUnit(value) {\n  return value && parseFloat(value.replace(',', '.')) || 0;\n}\n\nfunction parseTimezone(timezoneString) {\n  if (timezoneString === 'Z') return 0;\n  var captures = timezoneString.match(timezoneRegex);\n  if (!captures) return 0;\n  var sign = captures[1] === '+' ? -1 : 1;\n  var hours = parseInt(captures[2]);\n  var minutes = captures[3] && parseInt(captures[3]) || 0;\n\n  if (!validateTimezone(hours, minutes)) {\n    return NaN;\n  }\n\n  return sign * (hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE);\n}\n\nfunction dayOfISOWeekYear(isoWeekYear, week, day) {\n  var date = new Date(0);\n  date.setUTCFullYear(isoWeekYear, 0, 4);\n  var fourthOfJanuaryDay = date.getUTCDay() || 7;\n  var diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n} // Validation functions\n// February is null to handle the leap year (using ||)\n\n\nvar daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || year % 4 === 0 && year % 100;\n}\n\nfunction validateDate(year, month, date) {\n  return month >= 0 && month <= 11 && date >= 1 && date <= (daysInMonths[month] || (isLeapYearIndex(year) ? 29 : 28));\n}\n\nfunction validateDayOfYearDate(year, dayOfYear) {\n  return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex(year) ? 366 : 365);\n}\n\nfunction validateWeekDate(_year, week, day) {\n  return week >= 1 && week <= 53 && day >= 0 && day <= 6;\n}\n\nfunction validateTime(hours, minutes, seconds) {\n  if (hours === 24) {\n    return minutes === 0 && seconds === 0;\n  }\n\n  return seconds >= 0 && seconds < 60 && minutes >= 0 && minutes < 60 && hours >= 0 && hours < 25;\n}\n\nfunction validateTimezone(_hours, minutes) {\n  return minutes >= 0 && minutes <= 59;\n}","import React from 'react';\nimport { graphql } from 'gatsby';\nimport PropTypes from 'prop-types';\nimport { format, parseISO } from 'date-fns';\nimport { Container, Row, Col } from 'react-bootstrap';\n\nimport './post.scss';\nimport SEO from '~components/seo';\nimport NotFoundPage from '~pages/404';\nimport Layout from '~components/layout';\n\nconst WordPressPostContent = ({ data }) => {\n  if (!data || !data.wordpressPost) {\n    return <NotFoundPage />;\n  }\n\n  const {\n    wordpressPost: {\n      content,\n      title,\n      date: rawDate,\n      author: { name }\n    }\n  } = data;\n\n  const parsed = parseISO(rawDate);\n  const date = format(parsed, \"yyyy-MM-dd' at 'HH:mm:ss\");\n\n  return (\n    <Layout>\n      <SEO title={title} />\n      <Container className=\"mt-5\">\n        <Row>\n          <Col md=\"12\" className=\"mt-4\">\n            <h1>{title}</h1>\n          </Col>\n        </Row>\n        <Row>\n          <Col md=\"12\" className=\"mt-2 mb-2\">\n            Posted on {date} by {name}\n          </Col>\n        </Row>\n        <hr />\n        <Row>\n          <Col\n            md=\"12\"\n            className=\"mt-4\"\n            dangerouslySetInnerHTML={{ __html: content }}\n          />\n        </Row>\n      </Container>\n    </Layout>\n  );\n};\n\nWordPressPostContent.displayName = 'WordPressPostContent';\nWordPressPostContent.propTypes = {\n  data: PropTypes.object\n};\n\nexport default WordPressPostContent;\n\nexport const pageQuery = graphql`\n  query($path: String!) {\n    wordpressPost(path: { eq: $path }) {\n      date\n      title\n      content\n      author {\n        name\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}